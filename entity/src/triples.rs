//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "triples")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub entity_id: String,
    #[sea_orm(column_type = "Text")]
    pub attribute_id: String,
    #[sea_orm(column_type = "Text")]
    pub value_id: String,
    #[sea_orm(column_type = "Text")]
    pub value_type: String,
    #[sea_orm(column_type = "Text")]
    pub value: String,
    #[sea_orm(column_type = "Text")]
    pub defined_in: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::entities::Entity",
        from = "Column::EntityId",
        to = "super::entities::Column::Id"
    )]
    EntityRelation,

    #[sea_orm(
        belongs_to = "super::entities::Entity",
        from = "Column::AttributeId",
        to = "super::entities::Column::Id"
    )]
    AttributeRelation,
}

impl ActiveModelBehavior for ActiveModel {}

pub struct TriplesToEntity;

impl Linked for TriplesToEntity {
    type FromEntity = Entity;

    type ToEntity = super::entities::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![
            Relation::EntityRelation.def().rev(),
            Relation::AttributeRelation.def(),
        ]
    }
}
